# Amazon Linux 2018.03.0 for Amazon Lightsail
---

- name: uninstall nodejs
  yum: name=nodejs state=absent

- name: install node
  shell: |
    cd /usr/local/src
    git clone https://github.com/tj/n.git | true
    cd n
    make
    mkdir -p /usr/local/n
    chown -R 991:991 /usr/local/n
    /usr/local/bin/n {{node_version}}
  args:
    creates: /usr/local/bin/node

- name: install yarn
  raw: |
    cd /usr/local/src
    wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo
    yes | curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -
    curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
    yum install -y yarn
  args:
    creates: /usr/bin/yarn

- name: install wkhtmltoimage
  raw: |
    cd /usr/local/src
    wget https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
    tar -xvf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
    mv wkhtmltox/bin/wkhtmltoimage /usr/bin/wkhtmltoimage

- name: install pkg-config
  yum: name=http://mirror.centos.org/centos/7/os/x86_64/Packages/pkgconfig-0.27.1-4.el7.x86_64.rpm

- name: install db4
  yum:
    name:
      - db4-utils
      - db4

- name: install build-essential
  yum:
    name:
      - "@Development Tools"
      - "@Development Libraries"

- name: install remi repository
  yum: name=http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

- name: install other library for remi
  yum: pkg=redis state=latest enablerepo=remi

- name: install certbot
  raw: |
    cd /usr/local/src
    wget https://dl.eff.org/certbot-auto
    chmod a+x certbot-auto
    cp certbot-auto /usr/local/bin

- name: install other library
  yum:
    state: latest
    name:
      - ImageMagick
      - postgresql-devel
      - libxml2-devel
      - libxslt-devel
      - file
      - git
      - git-core
      - gcc-c++
      - protobuf
      - protobuf-compiler
      - protobuf-devel
      - gcc
      - autoconf
      - bison
      - openssl
      - openssl-devel # libssl-dev
      - libyaml-devel # libyaml-devel
      - readline
      - readline-devel # libreadline6-dev
      - zlib
      - zlib-devel #  zlib1g-dev
      - ncurses-libs # ncurses-libs
      - ncurses-devel
      - libffi-devel #libffi-dev
      - gdbm # libgdbm5
      - gdbm-devel # libgdbm-dev
      - nginx
      - postgresql
      - postgresql-contrib
      - libidn-devel
      - libicu-devel

- name: install ruby 2.5.1
  yum:
    name: "https://github.com/feedforce/ruby-rpm/releases/download/{{ruby_version}}/ruby-{{ruby_version}}-1.el6.x86_64.rpm"
    allow_downgrade: yes # Amazon LinuxのRubyにはEpochが付いているためバージョンが新しいと判定されてしまう

- name: add mastodon group
  group: name=mastodon gid=991

- name: add mastodon user
  user: name=mastodon uid=991 state=present  groups=mastodon

- name: install node for mastodon
  become: yes
  become_user: mastodon
  raw: |
    echo "export N_PREFIX=/home/mastodon/" >> ~/.bashrc
    echo "export PATH=/usr/local/bin:~/n/bin/:$PATH" >> ~/.bashrc
    source ~/.bashrc
    export PATH=/usr/local/bin:~/n/bin/:$PATH
    n {{node_version}}

- name: ruby yum dependencies
  yum:
    state: latest
    name:
      - icu.x86_64
      - libicu-devel.x86_64

- name: bundler install
  become: yes
  become_user: mastodon
  environment:
    GEM_HOME: /home/mastodon/.gem/
    GEM_PATH: /home/mastodon/.gem/
  gem: name=bundler

- name: ruby dependencies
  become: yes
  become_user: mastodon
  raw: |
    cd ~
    [ ! -e ~/live ] && git clone https://github.com/tootsuite/mastodon.git live
    cd ~/live
    [ `git branch | grep '* production' | wc -l` -ne 1 ] && git checkout $(git tag -l | grep -v 'rc[0-9]*$' | sort -V | tail -n 1) | true
    [ `git branch | grep '* production' | wc -l` -ne 1 ] && git checkout -b production
    gem_bin=`find /home/mastodon/.gem/ -name bundle | grep bin | sed 's/\/bundle//' | head -n 1`
    echo 'export PATH='"${gem_bin}"':$PATH' >> ~/.bashrc
    echo 'export GEM_HOME=/home/mastodon/.gem/' >> ~/.bashrc
    echo 'export GEM_PATH=/home/mastodon/.gem/' >> ~/.bashrc
    source ~/.bashrc
    gem install bundler || true
    bundle config --local build.charlock_holmes -- --with-cxxflags=-std=c++11
    bundle config --local build.cld3 -- --with-cxxflags=-std=c++11
    bundle config --local build.unf_ext -- --with-cxxflags=-std=c++11
    bundle install -j$(getconf _NPROCESSORS_ONLN) --deployment --without development test

- name: nodejs dependencies
  become: yes
  become_user: mastodon
  raw: |
    source ~/.bashrc
    cd ~
    [ ! -e ~/live ] && git clone https://github.com/tootsuite/mastodon.git live
    cd ~/live
    yarn install --pure-lockfile

- name: install PGDG repo
  yum: name=https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-6-x86_64/pgdg-ami201503-96-9.6-2.noarch.rpm

- name: install postgres and libs
  yum:
    name:
      - postgresql96
      - postgresql96-server
      - postgresql96-libs
      - postgresql96-contrib
      - python27-psycopg2

- name: postgresql initdb
  shell: /etc/init.d/postgresql96 initdb
  args:
    creates:
      /var/lib/pgsql96/data/pg_hba.conf

- name: edit pg_hba.conf
  lineinfile:
    path: /var/lib/pgsql96/data/pg_hba.conf
    #     TYPE     DATABASE        USER            ADDRESS                 METHOD
    line: 'local   all             all                                     trust'
    regexp: '^local +all +all +.*'

- name: start postgresql
  service:
    name: postgresql96
    state: started
    enabled: yes

- name: create mastodon user
  postgresql_user:
    name: mastodon
    role_attr_flags: CREATEDB

- name: copy nginx.conf
  template:
     src: nginx.conf
     dest: /etc/nginx/conf.d/mastodon.conf
     owner: root
     group: root
     mode: 0644 

- name: install redis
  service:
    name: redis
    state: started
    enabled: yes

- name: check certbot
  stat:
    path: /etc/letsencrypt/live/{{site_domain}}/cert.pem
  register: certbot

- name: exists certbot
  debug:
    msg: "{{certbot.stat.exists}}"

- name: install python27-pip
  yum: name=python27-pip


- name: first run certbot phase 1
  when: not certbot.stat.exists
  shell: |
    export PATH=$PATH:/usr/local/bin
    service nginx stop || true
    pip install -U pip virtualenv cryptography argparse cheetah oauth PrettyTable pyserial || true
    find / -name chardet* | grep python | xargs rm || true
    rm -rf /opt/eff.org/certbot/
    pip install certbot || true

- name: first run certbot phase 2
  when: not certbot.stat.exists
  shell: |
    export PATH=$PATH:/usr/local/bin
    yes 1 | certbot-auto certonly --agree-tos --no-bootstrap --standalone --debug  -d  {{site_domain}} -m {{certbot_email_address}}

- name: start nginx
  raw: |
    service nginx start

- name: copy letsencrypt-renew
  copy:
     src: letsencrypt-renew
     dest: /etc/cron.daily/letsencrypt-renew
     owner: root
     group: root
     mode: 0744

- name: setup permission
  raw: |
    usermod -aG users nginx
    chmod 770 /home/mastodon/
    service nginx reload

- name: install supervisor
  raw: |
    mkdir -p /var/log/supervisor/
    /usr/local/bin/pip install supervisor

- name: copy supervisord.conf # nohup supervisord -n -c /etc/supervisord.conf >/dev/null 2>&1 &
  template:
     src: supervisord.conf
     dest: /etc/supervisord.conf
     owner: root
     group: root
     mode: 0644

- debug:
    msg: "Processing stops here, so manually"
- debug:
    msg: "RAILS_ENV=production bundle exec rake mastodon:setup"


- name: mastodon application configuration
  become: yes
  become_user: mastodon
  shell: |
   source ~/.bashrc
   cd ~/live
   echo ruby -v
   bundle install
   RAILS_ENV=production bundle exec rake mastodon:setup
  args:
    creates: $HOME/live/.env.production
